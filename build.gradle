plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '16.8.1'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

gradleLint.rules = ['all-dependency']

def jacksonVersion = '2.10.2'
def junit5Version = '5.6.0'
def problemVersion = '0.24.0'

dependencies {
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.12'
    implementation(group: 'org.zalando', name: 'problem', version: problemVersion) {
        compileOnly(group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.0') {
            because 'Dependency has maven scope provided'
        }
    }
    implementation group: 'org.zalando', name: 'jackson-datatype-problem', version: problemVersion
    implementation 'org.slf4j:slf4j-api:1.8.0-beta4'
    implementation group: 'com.github.BIBSYSDEV', name: 'nva-commons', version: '0.3.4'
    implementation group: 'com.github.BIBSYSDEV', name: 'nva-datamodel-java', version: '0.7.0'
    implementation group: 'com.github.BIBSYSDEV', name: 'nva-commons', version: '0.3.2'
    implementation(group: 'com.ibm.icu', name: 'icu4j', version: '66.1') {
        because 'We use this to map ordinals to numbers'
    }
    testImplementation('junit:junit:4.13') {
        constraints {
            implementation('org.hamcrest:hamcrest-core:2.2')
        }
        because 'We have some junit4 code still running'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
    testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit5Version
    testImplementation('org.hamcrest:hamcrest') {
        constraints {
            implementation('org.hamcrest:hamcrest:2.2') {
                because 'Our usage does not differ from 1.x'
            }
        }
    }
}

test {
    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}